//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TreinaWeb.EntitySQL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdventureWorksEntities : DbContext
    {
        public AdventureWorksEntities()
            : base("name=AdventureWorksEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategory { get; set; }
    
        public virtual ObjectResult<ProductCategory> GetCategory(Nullable<int> resultType)
        {
            var resultTypeParameter = resultType.HasValue ?
                new ObjectParameter("resultType", resultType) :
                new ObjectParameter("resultType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCategory>("GetCategory", resultTypeParameter);
        }
    
        public virtual ObjectResult<ProductCategory> GetCategory(Nullable<int> resultType, MergeOption mergeOption)
        {
            var resultTypeParameter = resultType.HasValue ?
                new ObjectParameter("resultType", resultType) :
                new ObjectParameter("resultType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCategory>("GetCategory", mergeOption, resultTypeParameter);
        }
    
        [DbFunction("AdventureWorksEntities", "FindProductSubcategoriesByName")]
        public virtual IQueryable<ProductSubcategory> FindProductSubcategoriesByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ProductSubcategory>("[AdventureWorksEntities].[FindProductSubcategoriesByName](@name)", nameParameter);
        }
    }
}
